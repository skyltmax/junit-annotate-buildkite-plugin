#!/usr/bin/env ruby
# frozen_string_literal: true

require "rexml/document"
require "rexml/element"
require "cgi/util"
require "tempfile"

# Reads a list of junit files and returns a nice Buildkite build annotation on
# STDOUT that summarizes any failures.

junits_dir = ARGV[0]
abort("Usage: annotate <junits-dir>") unless junits_dir
abort("#{junits_dir} does not exist") unless Dir.exist?(junits_dir)

job_pattern = ENV["BUILDKITE_PLUGIN_JUNIT_ANNOTATE_JOB_UUID_FILE_PATTERN"]
if !job_pattern || job_pattern.empty?
  job_pattern = "(?<job_id>[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})"
end

failure_format = ENV["BUILDKITE_PLUGIN_JUNIT_ANNOTATE_FAILURE_FORMAT"]
failure_format = "classname" if !failure_format || failure_format.empty?

report_slowest = ENV["BUILDKITE_PLUGIN_JUNIT_ANNOTATE_REPORT_SLOWEST"].to_i
skip_message = ENV["BUILDKITE_PLUGIN_JUNIT_ANNOTATE_SKIP_MESSAGE"] == "true"
terminal_message = ENV["BUILDKITE_PLUGIN_JUNIT_ANNOTATE_TERMINAL_MESSAGE"] == "true"

Failure = Struct.new(:name, :unit_name, :body, :job, :type, :message)

Timing = Struct.new(:name, :unit_name, :time)

junit_report_files = Dir.glob(File.join(junits_dir, "**", "*"))
testcases = 0
failures = []
timings = []

def text_content(element)
  # Handle mulptiple CDATA/text children elements
  text = element.texts.map(&:value).join.strip
  if text.empty?
    nil
  else
    text
  end
end

def message_content(element)
  # Handle empty attributes
  message = element.attributes["message"]
  if message.nil? || message.empty?
    nil
  else
    message.to_s
  end
end

junit_report_files.sort.each do |file|
  next if File.directory?(file)

  warn "Parsing #{file.sub(junits_dir, "")}"
  job = File.basename(file)[/#{job_pattern}/, 1]
  xml = File.read(file)
  doc = REXML::Document.new(xml)

  REXML::XPath.each(doc, "//testsuite/testcase") do |testcase|
    testcases += 1
    name = testcase.attributes["name"].to_s
    unit_name = testcase.attributes[failure_format].to_s
    time = testcase.attributes["time"].to_f
    timings << Timing.new(name, unit_name, time)
    testcase.elements.each("failure") do |failure|
      failures << Failure.new(name, unit_name, text_content(failure), job, :failure, message_content(failure))
    end
    testcase.elements.each("error") do |error|
      failures << Failure.new(name, unit_name, text_content(error), job, :error, message_content(error))
    end
  end
end

warn "--- ‚úçÔ∏è Preparing annotation"
warn "#{testcases} testcases found"

if failures.any?
  warn "There #{failures.length == 1 ? "is 1 failure/error" : "are #{failures.length} failures/errors"} üò≠"
else
  warn "There were no failures/errors üôå"
end

failures_count = failures.count { |f| f.type == :failure }
errors_count = failures.count { |f| f.type == :error }

puts <<~TABLE
  <table>
  <tr>
    <th class="green">Testcases</th>
    <th class="red">Failures</th>
    <th>Errors</th>
  </tr>
  <tr>
    <td>#{testcases}</td>
    <td>#{failures_count}</td>
    <td>#{errors_count}</td>
  </tr>
  </table>
TABLE

failures.each do |failure|
  puts "<br>"
  puts "<details>"
  puts "<summary><code><span class=\"bold\">#{failure.unit_name}:</span> #{failure.name}</code></summary>\n\n"
  puts "<p>#{failure.message.chomp.strip}</p>\n\n" if failure.message && !skip_message
  if failure.body
    if terminal_message
      file = Tempfile.new("body")
      file.write(failure.body.chomp.strip)
      file.close
      puts "<pre class=\"term\"><code>#{`cat #{file.path} | terminal-to-html`}</code></pre>\n\n"
    else
      puts "<pre><code>#{CGI.escapeHTML(failure.body.chomp.strip)}</code></pre>\n\n"
    end
  end
  puts "in <a href=\"##{failure.job}\">Job ##{failure.job}</a>" if failure.job
  puts "</details>"
  puts "" unless failure == failures.last
end

if report_slowest > 0
  warn "Reporting slowest tests ‚è±"

  puts "<details>"
  puts "<summary>#{report_slowest} slowest tests</summary>\n\n"
  puts "<table>"
  puts "<thead><tr><th>Unit</th><th>Test</th><th>Time</th></tr></thead>"
  puts "<tbody>"
  timings.sort_by(&:time).reverse.take(report_slowest).each do |timing|
    puts "<tr><td>#{timing.unit_name}</td><td>#{timing.name}</td><td>#{timing.time}</td></tr>"
  end
  puts "</tbody>"
  puts "</table>"
  puts "</details>"
end

exit 64 if failures.any? # special exit code to signal test failures
